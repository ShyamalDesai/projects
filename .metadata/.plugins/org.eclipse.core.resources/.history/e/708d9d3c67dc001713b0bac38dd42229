#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
using namespace std;


/************************************************

2. Phone number generation Write a C++ program that generates, and prints out, all valid phone numbers subject to the following constraints:
a. They consist of a sequence of digits generated by following the moves of a given chess piece on the following telephone keypad, starting from any position:
1   2   3
4   5   6
7   8   9
*   0   #

b. They are of length 7, and cannot begin with a 0 or a 1. In addition, they can contain only digits, so * and # should not be included. keypad, starting from any position:

c. The program should be written in a generic object-oriented manner, so that it works with any chess piece, but for the purposes  of this  specific  test you only need to implement support for the knight,  which has the following valid  move pattern, upon starting at the center dot:

On the telephone keypad, for example, a knight starting on number 8 could move to 1 or 3. From 1, it could move to 6 or 8, etc.
*************************************************/

///the first strategy that comes to mind is creating a chess piece object e.g. knight
/// the knight will store all moves from each number statically
/// so the problem translates to traversing the static tree generated (recursively)

std::map<int, std::vector<int>  > knightList;
char phonenumber[8];


int
next (const int val, const int index, int& count)
{
	std::vector<int>& values = knightList [val];
	phonenumber[index] = val;

	if (count == 4)
	{
		//a 3 digit number is complete
		printf ("\n");
		count -= 2;
		return -2;
	}
	printf ("%d", val);
	if (-2 == next (values[0], index, ++count))
	{
		if (values[index+1] != -1)
		{
			next (values[1], 1, ++count);
		}
		else
			return 1;
	}
	return 0;
}
/*
int next (const int val, const int index, int& count)
{

    int ret = 1;
    printf ("%d", val);
    std::vector<int>& values = knightList [val];

     if (count == 7)
     {
       //printf ("\n");
       ret = 0;
       return ret;
     }
     else if (values[index] == -1)
        return 1;
     else
     {
        ++count;
        if (!next (values[index], 0, count))
        {
        	printf ("\n");
        	--count;
        }
        if (!next (values[index], 1, count))
        {
        	printf ("\n");
        	count -= 2;
        }
        if (!next (values[index], 2, count))
        {
        	printf ("\n");
        	count -=3;
        }
     }
     return ret;

}
*/
int main()
{
	memset (&phonenumber, 0, 8);
	//knightlist is a map
    std::vector <int> values = {6, 4, -1, -1, -1, -1, -1, -1, -1, -1};
    knightList [0] = values;

    values = {6, 8, -1, -1, -1, -1, -1, -1, -1, -1};
    knightList [1] = values;

    knightList [2] = (values =  {7, 9, -1, -1, -1, -1, -1, -1, -1, -1});
    knightList [3] = (values = {4, 8, -1, -1, -1, -1, -1, -1, -1, -1});
    knightList [4] = (values = {3, 9, 0, -1, -1, -1, -1, -1, -1, -1});
    knightList [5] = (values = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    knightList [6] = (values = {1, 7, 0, -1, -1, -1, -1, -1, -1, -1});
    knightList [7] = (values = {2, 6, -1, -1, -1, -1, -1, -1, -1, -1});
    knightList [8] = (values = {1, 3, -1, -1, -1, -1, -1, -1, -1, -1});
    knightList [9] = (values = {2, 4, -1, -1, -1, -1, -1, -1, -1, -1});

    //for (int i = 2; i < 3; ++i)
    //{
        int count = 1;
        next (2, 0, count);
        printf ("\n");
    //}
    return 0;
}
